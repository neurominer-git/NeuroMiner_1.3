function [thresholds, netBenefits, treatAll, treatNone] = nk_DSAv(y_true, y_probs, maxProb, stepSize)
    % Inputs:
    % y_true :      the observed labels of the binary classification problem
    % y_probs :     the class memberships generated by the respective classifier
    % maxProb :     the maximum probability up to which the decision-curve analysis is performed
    % stepSize :    probability step size for the analysis
    %
    % Outputs:
    % thresholds :  the probability evaluation vector. Each probability entry in the vector serves as cutoff to determine TPs and FPs.
    % netBenefits : the net benefit vector of the classifier (computed at each cutoff of "thresholds").
    % treatAll :    the net benefit of the "treat all" condition (computed at each cutoff of "thresholds").
    % treatNone :   the net benefit of the "treat none" condition which is 0 across all cutoffs.
    % ===========================================================================================================
    % (c) Nikolaos Koutsouleris, 05/2024

    % Validate inputs
    if length(y_true) ~= length(y_probs)
        error('y_true and y_probs must be of the same length.');
    end
    if maxProb <= 0 || maxProb > 1
        error('maxProb must be in the range (0, 1].');
    end
    if stepSize <= 0 || stepSize >= 1
        error('stepSize must be in the range (0, 1).');
    end

    % Initialize cutoffs
    thresholds = 0:stepSize:maxProb;

    num_cases = numel(y_true);
    prevalence = sum(y_true == 1) / num_cases; % Proportion of true positive cases

    % Calculate TP and FP for each threshold
    [TPs, FPs] = arrayfun(@(threshold) ...
        deal(sum(y_true == 1 & y_probs > threshold), sum(y_true == 0 & y_probs > threshold)), ...
        thresholds);

    % Calculate net benefits
    netBenefits = (TPs / num_cases) - (FPs / num_cases) .* (thresholds ./ (1 - thresholds));
    treatAll = prevalence - (1 - prevalence) * (thresholds ./ (1 - thresholds));
    treatNone = zeros(size(thresholds)); % Always zero
    
end