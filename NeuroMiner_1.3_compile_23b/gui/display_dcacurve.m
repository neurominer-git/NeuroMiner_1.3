function display_dcacurve(y_true, y_probs, titlestr)
    
     % Calculate initial max probability
    initialMaxProb = findInitialMaxProbability(y_true, y_probs);

    % Create figure with normalized units
    f = figure('Name', 'Interactive Decision Curve Analysis', 'NumberTitle', 'off', 'Units', 'normalized');

    % Control dimensions and positions
    controlHeight = 0.05;
    controlSpacing = 0.02;
    textWidth = 0.2;
    sliderWidth = 0.2;
    totalControlsWidth = 2 * textWidth + 2 * sliderWidth + 3 * controlSpacing;

    % Starting X position for controls to center them
    startX = (1 - totalControlsWidth) / 2;

    % Axes for plot, positioned below the controls
    ax = axes(f, 'Units', 'normalized', 'Position', [0.125 0.125 0.8 0.7]);

    % UI control for maximum probability value
    maxProbValue = initialMaxProb;
    hMaxProbText = uicontrol(f, 'Style', 'text', 'Units', 'normalized', ...
                             'Position', [startX, 0.9625 - controlHeight, textWidth, controlHeight], ...
                             'String', sprintf('Max Probability: %.2f', maxProbValue));
    hMaxProb = uicontrol(f, 'Style', 'slider', 'Units', 'normalized', ...
                         'Min', 0.1, 'Max', 1, 'Value', maxProbValue, ...
                         'Position', [startX + textWidth + controlSpacing, 0.97 - controlHeight, sliderWidth, controlHeight], ...
                         'Callback', @(es,ed) updatePlot());

    % UI control for step size
    stepSizeValue = 0.05;
    hStepSizeText = uicontrol(f, 'Style', 'text', 'Units', 'normalized', ...
                              'Position', [startX + textWidth + sliderWidth + 2 * controlSpacing, 0.9625 - controlHeight, textWidth, controlHeight], ...
                              'String', sprintf('Step Size: %.2f', stepSizeValue));
    hStepSize = uicontrol(f, 'Style', 'slider', 'Units', 'normalized', ...
                          'Min', 0.01, 'Max', 0.1, 'Value', stepSizeValue, ...
                          'Position', [startX + 2 * textWidth + sliderWidth + 3 * controlSpacing, 0.97 - controlHeight, sliderWidth, controlHeight], ...
                          'Callback', @(es,ed) updatePlot());

    % Function to find initial max probability where net benefit is still positive
    function initialMaxProb = findInitialMaxProbability(y_true, y_probs)
        stepSize = 0.01;  % Fine step size for initial search
        maxProb = 1;      % Maximum probability to search
        [thresholds, netBenefits] = nk_DSAv(y_true, y_probs, maxProb, stepSize);
        positiveNetBenefitIndices = find(netBenefits > 0);
        if ~isempty(positiveNetBenefitIndices)
            initialMaxProb = thresholds(max(positiveNetBenefitIndices));
        else
            initialMaxProb = maxProb; % Default to max if no positive net benefit found
        end
    end

    % Update plot function
    function updatePlot()
        maxProb = get(hMaxProb, 'Value');
        stepSize = get(hStepSize, 'Value');

        % Update text labels
        set(hMaxProbText, 'String', sprintf('Max Probability: %.2f', maxProb));
        set(hStepSizeText, 'String', sprintf('Step Size: %.2f', stepSize));

        % Clear current axes
        cla(ax);

        % Calculate and plot the Net Benefit curve along with treat all and treat none curves
        [thresholds, netBenefits, treatAll, treatNone] = nk_DSAv(y_true, y_probs, maxProb, stepSize);
        plot(ax, thresholds, netBenefits, 'b', 'DisplayName', 'Decide according to model');
        hold(ax, 'on');
        plot(ax, thresholds, treatAll, 'r--', 'DisplayName', 'Decide on All');
        plot(ax, thresholds, treatNone, 'k:', 'DisplayName', 'Decide on None');
        hold(ax, 'off');
        box on
        xlabel(ax, 'Probability Threshold');
        ylabel(ax, 'Net Benefit');
        title(ax, titlestr, 'Interpreter','none');
        legend(ax, 'show');
    end

end

function [thresholds, netBenefits, treatAll, treatNone] = calculateNetBenefit(y_true, y_probs, maxProb, stepSize)
% Inputs:
% y_true :      the observed labels of the binary classification problem
% y_probs :     the class memberships generated by the respective classifier
% maxProb :     the maximum probability to up to which the decision-curve
%               analysis is performed.
% stepSize :    probability step size for the analysis
%
% Outputs:
% thresholds :  the probability evaluation vector. Each probability entry in
%               the vector serves as cutoff to determine TPs and FPs.
% netBenefits : the net benefit vector of the classifier (computed at each cutoff of "thresholds").
% treatAll :    the net benefit of the "treat all" condition (computed at each cutoff of "thresholds").
% treatNone :   the net benefit of the "treat all" condition which is 0 across all cutoffs.
% ===========================================================================================================
% (c) Nikolaos Koutsouleris, 05/2024

thresholds = 0:stepSize:maxProb;
netBenefits = zeros(size(thresholds));
treatAll = zeros(size(thresholds));
treatNone = zeros(size(thresholds));
num_cases = numel(y_true);
prevalence = sum(y_true==1)/num_cases; % Proportion of true positive cases

for i = 1:numel(thresholds)
    threshold = thresholds(i);
    TP = sum(y_true & y_probs > threshold); % True Positives
    FP = sum(~y_true & y_probs > threshold); % False Positives

    % Calculate Net Benefit for the classifier
    netBenefits(i) = (TP / num_cases) - (FP / num_cases) * (threshold / (1 - threshold));

    % Calculate Net Benefit for 'treat all' strategy
    treatAll(i) = prevalence - (1 - prevalence) * (threshold / (1 - threshold));

    % 'Treat none' strategy (always 0)
    treatNone(i) = 0; 
    
end

end

